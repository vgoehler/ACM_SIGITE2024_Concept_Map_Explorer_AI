"""
This is a hack
I want to use an automatic classification system instead.
For now, I just have the manual one here.
"""
categories = {
    "Machine Learning and Algorithms": {
        'Machine Learning': 247,
        'Algorithms': 222,
        'Regression': 190,
        'Classification': 249,
        'Decision Tree': 254,
        'Clustering': 253,
        'Supervised Learning': 248,
        'Unsupervised Learning': 252,
        'Overfitting': 16,
        'Support Vector Machines': 137,
        'Genetic Algorithms': 227,
        'kNN (k nearest neighbors)': 251,
        'Optimization': 108,
        'Training': 220,
        'Batch Size': 37,
        'Loss Function/Fitness Score': 40,
        'Gradient': 41,
        'Minimize error function': 171,
        'ERM-Learning': 172,
        'D-1 loss': 167,
        'Quadratic loss': 166,
        'log loss': 168,
        'Bias': 35,
        'Error function': 165,
        'Statistical Infering': 54,
        'Other "Smart" Algorithms': 12,
        'Stochastic/Statistic': 130,
        'Prediction': 149,
        'Rationality': 194,
        'Genetic': 44,
        'Newton': 43,
        'Learning Rate': 38,
        'Data': 219,
        'Data Analysis': 92,
        'Training Data': 18,
        'Measuring Data': 23,
        'Processing of Input data': 147,
        'Analytics': 121,
        'Quality depends on data': 221,
        'Evaluation Data': 19,
        'Performance appraisal': 196,
        'Symptoms Diagnosis Database': 49,
        'Usable knowledge': 156,
        'Available knowledge': 155,
        'Normalize': 164
    },
    "Artificial Intelligence Concepts": {
        'Artificial Intelligence': 244,
        'AI': 210,
        'Neural Networks': 135,
        'Deep Learning': 114,
        'Intelligent Agents': 245,
        'Learning Agents': 192,
        'Autonomous Driving': 260,
        'Virtual Intelligence': 123,
        'Strong AI': 209,
        'Weak AI': 208,
        'Swarm Intelligence': 113,
        'Expert Systems': 45,
        'Intelligent Systems': 246,
        'Generative Image AI': 72,
        'Hallucination': 217,
        'Logic Infering': 195,
        'Temporal Infering': 57,
        'Uncertain Infering': 55,
        'Different Types (Agents)': 52,
        'Sensors': 199,
        'Communication': 203,
        'Environment': 197,
        'Actuators': 198,
        'Searching': 193,
        'Vision': 139,
        'Intelligence': 102,
        'Conclusions': 128,
        'Language': 204,
        'Communicate': 201,
        'Knowledge base': 202,
        'Action': 200,
        'Needs expert knowledge': 239,
        'Different strategies dependent on world': 237,
        'Some agents can change their rules': 238,
        'AI through logic': 229,
        'AI Types': 106,
        'Bayes Algorithm': 136,
        'Evolution': 103,
        'Prolog Excursion': 256,
        'Rules': 233,
        'Interpolation': 13,
        'Unsupervised': 110,
        'Cluster': 189,
        'Learning': 126,
        'Rules/Facts': 47,
    },
    "Programming and Applications": {
        'PyTorch': 160,
        'Tensor Flow': 224,
        'TensorFlow': 159,
        'Keras': 161,
        'Prolog': 230,
        'Python': 162,
        'MATLAB': 158,
        'Programming with Logic': 255,
        'Logic Programming Languages': 87,
        'Programs': 146,
        'Toolkits': 157,
        'Yolo': 94,
        'Programming': 104,
        'Applications': 257,
        'Robotics': 258,
        'Diagnosis': 124,
        'Medical Systems': 50,
        'Automated Factories': 259,
        'Drones': 261,
        'Imaging Procedures in Medicine': 262,
        'Object Detection': 93,
        'Image Recognition': 213,
        'Games': 91,
        'Chat GPT': 90,
        'ChatGPT': 216,
        'Bard': 215,
        'Mid Journey': 73,
        'Decisions by rules': 235,
        'Assistance': 143,
        'Image Generation': 212,
        'Text': 20,
        'Audio': 21,
        'Image': 22,
        'Natural Language Processing': 119,
        'Robots': 145,
        'Medicine': 84,
    },
    "Neural Networks and Deep Learning": {
        'Neural Network': 191,
        'Neural Nets': 67,
        'Layers': 226,
        'Layer': 27,
        'Sigmoid': 176,
        'Perceptron': 100,
        'Artificial Neuron': 223,
        'Convolutional Networks': 65,
        'Activation Function': 173,
        'Softrelu': 34,
        'Relu': 33,
        'Tanh': 175,
        'Step': 31,
        'heavy side': 179,
        'Not classic differentiable': 177,
        'Differentiable': 174,
        'LLM': 214,
        'Error': 28,
        'Neuron': 29,
        'Weights': 169,
        'Activation': 30,
        'Model': 25,
        'relu': 178,
        'Input': 163,
        'Output': 180,
        'Fehler Function': 10,
    },
    "Ethics and Societal Impact": {
        'Consciousness': 207,
        'Artificial Conscience': 2,
        'Ethics': 1,
        'Human Rights': 76,
        'Worldwide Moratorium': 98,
        'Fear "Red Button"': 97,
        'Call for Action': 62,
        'Development is not to stop': 81,
        'Change of work environment': 71,
        'Needs to be Checked by humans': 218,
        'Call in Society': 141,
        'Artificial empowered to independent act': 144,
        'Based on Evolutionary theory not safe': 228,
        'Companies: Google Microsoft OpenAI Meta': 77,
        'Emotions': 6,
        'Rationale': 5,
        'Independent Learning': 3,
        'Human Analogous': 68,
        'Human': 182,
        'Humans': 112,
        'Human-like/Independent': 116,
        'Learning agents': 236,
        'Symptoms': 85,
        'Fear': 142,
        'Is in change': 140,
        'their goal is': 264,
        'Symptoms Diagnosis Database': 49,
        'When to stop': 39,
    },
    "Miscellaneous Topics": {
        'Different worlds': 240,
        'Inflactionary Term Usage': 58,
        'Processing': 151,
        'Depends on': 153,
        'External': 206,
        'Internal': 205,
        'Question': 234,
        'Fact': 232,
        'Only for teaching': 231,
        'Being learned': 170,
        'Performance': 4,
        'Other Values': 24,
        'Public': 96,
        'In browser': 89,
        'Standard': 109,
        'Importance': 138,
        'Methods': 134,
        'Danger': 188,
        'Objective': 186,
        'More': 243,
        'Historic': 78,
        'Very old idea': 80,
        'Multiple AI Winters': 82,
        'Currently (seemingly) many breakthroughs + a lot of money': 79,
        'Humanlike Intelligence': 64,
        'Question of definition': 59,
        'Unclear Borders': 60,
        'Basics of law': 61,
        'All known knowledge of the world': 241,
        'Generic': 115,
        'Not complete world knowledge': 242,
        'Mathematic Basics': 53,
        'Biologically Inspired': 225,
        'Problem Solving': 263,
        'Results/Behaviour': 183,
    }
}

__titles_and_ids = {'Artificial Intelligence': 244,
                    'Ethics': 1,
                    'Artificial Conscience': 2,
                    'Independent Learning': 3,
                    'Rationale': 5,
                    'Emotions': 6,
                    'Performance': 4,
                    'Machine Learning': 247,
                    'Data': 219,
                    'Rules': 233,
                    'Fehler Function': 10,
                    'Other "Smart" Algorithms': 12,
                    'Overfitting': 16,
                    'Neural Network': 191,
                    'Loss Function/Fitness Score': 40,
                    'Regression': 190,
                    'Interpolation': 13,
                    'Training Data': 18,
                    'Evaluation Data': 19,
                    'Text': 20,
                    'Audio': 21,
                    'Image': 22,
                    'Measuring Data': 23,
                    'Other Values': 24,
                    'Model': 25,
                    'Layer': 27,
                    'Batch Size': 37,
                    'Learning Rate': 38,
                    'When to stop': 39,
                    'Error': 28,
                    'Neuron': 29,
                    'Bias': 35,
                    'Weights': 169,
                    'Activation': 30,
                    'Step': 31,
                    'Sigmoid': 176,
                    'Relu': 33,
                    'Softrelu': 34,
                    'Training': 220,
                    'Gradient': 41,
                    'Newton': 43,
                    'Genetic': 44,
                    'Expert Systems': 45,
                    'Data Analysis': 92,
                    'Rules/Facts': 47,
                    'Medical Systems': 50,
                    'Prolog': 230,
                    'AI': 210,
                    'Different Types (Agents)': 52,
                    'Question of definition': 59,
                    'Public': 96,
                    'Historic': 78,
                    'Applications': 257,
                    'Neural Nets': 67,
                    'Consciousness': 207,
                    'Mathematic Basics': 53,
                    'Humanlike Intelligence': 64,
                    'Perceptron': 100,
                    'Human Analogous': 68,
                    'Deep Learning': 114,
                    'Convolutional Networks': 65,
                    'Statistical Infering': 54,
                    'Uncertain Infering': 55,
                    'Logic Infering': 195,
                    'Temporal Infering': 57,
                    'Inflactionary Term Usage': 58,
                    'Unclear Borders': 60,
                    'Basics of law': 61,
                    'Call for Action': 62,
                    'Fear "Red Button"': 97,
                    'Worldwide Moratorium': 98,
                    'LLM': 214,
                    'Chat GPT': 90,
                    'Change of work environment': 71,
                    'Generative Image AI': 72,
                    'Mid Journey': 73,
                    'Autonomous Driving': 260,
                    'Games': 91,
                    'Companies: Google Microsoft OpenAI Meta': 77,
                    'Human Rights': 76,
                    'Currently (seemingly) many breakthroughs + a lot of money': 79,
                    'Very old idea': 80,
                    'Development is not to stop': 81,
                    'Multiple AI Winters': 82,
                    'Medicine': 84,
                    'Symptoms': 85,
                    'Diagnosis': 124,
                    'Logic Programming Languages': 87,
                    'In browser': 89,
                    'Object Detection': 93,
                    'Yolo': 94,
                    'PyTorch': 160,
                    'Intelligence': 102,
                    'Evolution': 103,
                    'Programming': 104,
                    'AI Types': 106,
                    'Algorithms': 222,
                    'Optimization': 108,
                    'Standard': 109,
                    'Unsupervised': 110,
                    'Neural Networks': 135,
                    'Humans': 112,
                    'Swarm Intelligence': 113,
                    'Generic': 115,
                    'Human-like/Independent': 116,
                    'Cluster': 189,
                    'Natural Language Processing': 119,
                    'Robotics': 258,
                    'Analytics': 121,
                    'Intelligent Agents': 245,
                    'Virtual Intelligence': 123,
                    'Learning': 126,
                    'Importance': 138,
                    'Conclusions': 128,
                    'Depends on': 153,
                    'Available knowledge': 155,
                    'Usable knowledge': 156,
                    'Is in change': 140,
                    'Vision': 139,
                    'Artificial empowered to independent act': 144,
                    'Call in Society': 141,
                    'Fear': 142,
                    'Assistance': 143,
                    'Programs': 146,
                    'Processing of Input data': 147,
                    'Robots': 145,
                    'Learning Agents': 192,
                    'Prediction': 149,
                    'Sensors': 199,
                    'Processing': 151,
                    'Stochastic/Statistic': 130,
                    'Toolkits': 157,
                    'Classification': 249,
                    'Methods': 134,
                    'Bayes Algorithm': 136,
                    'Support Vector Machines': 137,
                    'MATLAB': 158,
                    'Keras': 161,
                    'TensorFlow': 159,
                    'Python': 162,
                    'Input': 163,
                    'Normalize': 164,
                    'Error function': 165,
                    'Quadratic loss': 166,
                    'D-1 loss': 167,
                    'log loss': 168,
                    'Being learned': 170,
                    'ERM-Learning': 172,
                    'Minimize error function': 171,
                    'Output': 180,
                    'Activation Function': 173,
                    'Differentiable': 174,
                    'Tanh': 175,
                    'Not classic differentiable': 177,
                    'heavy side': 179,
                    'relu': 178,
                    'Human': 182,
                    'Results/Behaviour': 183,
                    'Danger': 188,
                    'Objective': 186,
                    'Weak AI': 208,
                    'Strong AI': 209,
                    'Rationality': 194,
                    'Searching': 193,
                    'Performance appraisal': 196,
                    'Actuators': 198,
                    'Environment': 197,
                    'Action': 200,
                    'Communication': 203,
                    'Knowledge base': 202,
                    'Communicate': 201,
                    'Language': 204,
                    'Internal': 205,
                    'External': 206,
                    'Genetic Algorithms': 227,
                    'Decisions by rules': 235,
                    'AI through logic': 229,
                    'Only for teaching': 231,
                    'Fact': 232,
                    'Question': 234,
                    'Based on Evolutionary theory not safe': 228,
                    'Learning agents': 236,
                    'Different worlds': 240,
                    'Needs expert knowledge': 239,
                    'Different strategies dependent on world': 237,
                    'Some agents can change their rules': 238,
                    'More': 243,
                    'All known knowledge of the world': 241,
                    'Not complete world knowledge': 242,
                    'Image Generation': 212,
                    'Image Recognition': 213,
                    'ChatGPT': 216,
                    'Bard': 215,
                    'Hallucination': 217,
                    'Needs to be Checked by humans': 218,
                    'Quality depends on data': 221,
                    'Artificial Neuron': 223,
                    'Tensor Flow': 224,
                    'Biologically Inspired': 225,
                    'Layers': 226,
                    'Intelligent Systems': 246,
                    'Supervised Learning': 248,
                    'Decision Tree': 254,
                    'kNN (k nearest neighbors)': 251,
                    'Unsupervised Learning': 252,
                    'Clustering': 253,
                    'Programming with Logic': 255,
                    'Prolog Excursion': 256,
                    'Automated Factories': 259,
                    'Drones': 261,
                    'Imaging Procedures in Medicine': 262,
                    'Problem Solving': 263,
                    'their goal is': 264}


def run_integrity_check():
    classifier = TitleClassification()
    errors = {}
    for title, id_nr in __titles_and_ids.items():
        try:
            classifier.title_2_class[title]
        except KeyError:
            errors[title] = id_nr
    print(errors)


class TitleClassification(object):

    def __init__(self):
        self._class_ids = {}
        self._title_2_class = {}

    @property
    def ids_class(self):
        return {v: k for k, v in self._class_ids.items()}

    @property
    def class_ids(self):
        if len(self._class_ids) == 0:
            self._initialize()
        return self._class_ids

    @class_ids.setter
    def class_ids(self, new_value):
        self._class_ids = new_value

    @property
    def title_2_class(self):
        if len(self._title_2_class) == 0:
            self._initialize()
        return self._title_2_class

    @title_2_class.setter
    def title_2_class(self, new_value):
        self._title_2_class = new_value

    @property
    def classes(self):
        return [k for k, _ in sorted(self._class_ids.items(), key=lambda item: item[1])]

    def _initialize(self) -> None:
        """
        This provides a classification of titles into classes, and ids for these classes.

        :return: A tuple of titles, classes and ids
        """
        self._class_ids = {k: i for i, k in enumerate(categories.keys())}
        self._title_2_class = {}
        for classification, title_dict in categories.items():
            for title in title_dict.keys():
                self._title_2_class[title] = classification


if __name__ == '__main__':
    run_integrity_check()
